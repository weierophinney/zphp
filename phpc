#!/usr/bin/env bash
# This script was generated by bashly 0.8.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
phpc_usage() {
  if [[ -n $long_usage ]]; then
    printf "phpc\n"
    echo

    printf "  Containerized PHP\n  \n  Run PHP via a container.\n  Switch between different PHP versions.\n  Run PHP scripts.\n  Run Composer.\n"
    echo

  else
    printf "phpc - Containerized PHP\n"
    echo

  fi

  printf "Usage:\n"
  printf "  phpc COMMAND\n"
  printf "  phpc [COMMAND] --help | -h\n"
  printf "  phpc --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  run        Run the PHP binary or a PHP script"
  echo "  composer   Run a composer command using the given PHP version"
  echo "  switch     Switch the default version of PHP selected"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
phpc_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "phpc run - Run the PHP binary or a PHP script\n"
    echo

  else
    printf "phpc run - Run the PHP binary or a PHP script\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "Usage:\n"
  printf "  phpc run [OPTIONS] ARGUMENTS...\n"
  printf "  phpc run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --php PHP"
    printf "    PHP version to use. If not provided, uses the default.\n"
    printf "    Allowed: AUTO, 5.6, 7.3, 7.4, 8.0, 8.1\n"
    printf "    Default: AUTO\n"
    echo

    # :flag.usage
    echo "  --expose-port PORT"
    printf "    A port for the container to expose. Use this option if you are\n    starting a web server (e.g. using the -S option, or starting an\n    async server via Mezzio or ReactPHP), or your script will listen\n    on a socket. The argument should be provided in a format that\n    \"docker run --publish\" supports.\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    echo "  ARGUMENTS..."
    printf "    Arguments to pass to the PHP binary\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  phpc run -v\n"
    printf "  phpc run -m\n"
    printf "  phpc run -a\n"
    printf "  phpc run vendor/bin/laminas\n"
    printf "  phpc run --php 8.1 -v\n"
    printf "  phpc run --php 5.6 -m\n"
    printf "  phpc run --php 7.3 -a\n"
    printf "  phpc run --php 8.0 vendor/bin/laminas\n"
    echo

  fi
}

# :command.usage
phpc_composer_usage() {
  if [[ -n $long_usage ]]; then
    printf "phpc composer - Run a composer command using the given PHP version\n"
    echo

  else
    printf "phpc composer - Run a composer command using the given PHP version\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "Usage:\n"
  printf "  phpc composer [OPTIONS] ARGUMENTS...\n"
  printf "  phpc composer --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --php PHP"
    printf "    PHP version to use. If not provided, uses the default.\n"
    printf "    Allowed: AUTO, 5.6, 7.3, 7.4, 8.0, 8.1\n"
    printf "    Default: AUTO\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    echo "  ARGUMENTS..."
    printf "    Arguments to pass to the PHP binary\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  phpc composer\n"
    printf "  phpc composer install\n"
    printf "  phpc composer update\n"
    printf "  phpc composer --php 8.1\n"
    printf "  phpc composer --php 7.4 install\n"
    printf "  phpc composer --php 5.6 update\n"
    echo

  fi
}

# :command.usage
phpc_switch_usage() {
  if [[ -n $long_usage ]]; then
    printf "phpc switch - Switch the default version of PHP selected\n"
    echo

  else
    printf "phpc switch - Switch the default version of PHP selected\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "Usage:\n"
  printf "  phpc switch PHP\n"
  printf "  phpc switch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  PHP"
    printf "    PHP version to use as default\n"
    printf "    Allowed: 5.6, 7.3, 7.4, 8.0, 8.1\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  phpc switch 8.1\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/config.sh
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

config_get() {
  local key=$1
  local regex="^$key *= *(.+)$"
  local value=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done < "$CONFIG_FILE"

  echo "$value"
}

config_set() {
  local key=$1
  shift
  local value="$*"

  config_init

  local regex="^($key) *= *.+$"
  local output=""
  local found_key=""
  local newline

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  printf "%b\n" "$output" > "$CONFIG_FILE"
}

config_del() {
  local key=$1

  local regex="^($key) *="
  local output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  printf "%b\n" "$output" > "$CONFIG_FILE"
}

config_show() {
  config_init
  cat "$CONFIG_FILE"
}

config_keys() {
  local regex="^([a-zA-Z0-9_\-\/\.]+) *="

  config_init

  local keys=()
  local key

  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done < "$CONFIG_FILE"
  echo "${keys[@]}"
}

config_has_key() {
  [[ $(config_get "$1") ]]
}

# :command.command_functions
# :command.function
phpc_run_command() {
  # src/run_command.sh
  local php

  if [[ "${args[--php]}" == "AUTO" ]]; then
      if ! config_has_key "default"; then
          red "You do not have a default PHP version set yet!"
          exit 1
      fi
      php=$(config_get "default")
  else
      php="${args[--php]}"
  fi

  if [[ -n "${args[--expose-port]}" ]]; then
      docker run -it --rm -v "$(pwd):/app" -w /app -p "${args[--expose-port]}" "zendphp:${php}" "${other_args[@]}"
  else
      docker run -it --rm -v "$(pwd):/app" -w /app "zendphp:${php}" "${other_args[@]}"
  fi

}

# :command.function
phpc_composer_command() {
  # src/composer_command.sh
  local php

  if [[ "${args[--php]}" == "AUTO" ]]; then
      if ! config_has_key "default"; then
          red "You do not have a default PHP version set yet!"
          exit 1
      fi
      php=$(config_get "default")
  else
      php="${args[--php]}"
  fi

  docker run -it --rm -v "$(pwd):/app" -w /app --entrypoint /usr/local/sbin/composer "zendphp:${php}" "${other_args[@]}"

}

# :command.function
phpc_switch_command() {
  # src/switch_command.sh
  local php="${args[php]}"
  local config_dir

  config_dir="$(dirname "${CONFIG_FILE}")"
  if [[ ! -d "${config_dir}" ]]; then
      green "Creating config directory ${config_dir}..."
      mkdir -p "${config_dir}"
  fi

  config_set "default" "${php}"
  green "Set default PHP version to ${php}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    phpc_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  run | r )
    action="run"
    shift
    phpc_run_parse_requirements "$@"
    shift $#
    ;;

  composer | c )
    action="composer"
    shift
    phpc_composer_parse_requirements "$@"
    shift $#
    ;;

  switch | s )
    action="switch"
    shift
    phpc_switch_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    phpc_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
phpc_run_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    phpc_run_usage
    exit
    ;;

  esac

  # :command.dependencies_filter
  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --php )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--php]="$2"
        shift
        shift
      else
        printf "%s\n" "--php requires an argument: --php PHP" >&2
        exit 1
      fi
      ;;

    # :flag.case
    --expose-port )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--expose-port]="$2"
        shift
        shift
      else
        printf "%s\n" "--expose-port requires an argument: --expose-port PORT" >&2
        exit 1
      fi
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_catch_all
      other_args+=("$1")
      shift

      ;;

    esac
  done

  # :command.catch_all_filter
  if [[ ${#other_args[@]} -eq 0 ]]; then
    printf "missing required argument: ARGUMENTS...\nusage: phpc run [OPTIONS] ARGUMENTS...\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args[--php]:-} ]] || args[--php]="AUTO"

  # :command.whitelist_filter
  if [[ ! ${args[--php]} =~ ^(AUTO|5.6|7.3|7.4|8.0|8.1)$ ]]; then
    printf "%s\n" "--php must be one of: AUTO, 5.6, 7.3, 7.4, 8.0, 8.1" >&2
    exit 1
  fi

}

# :command.parse_requirements
phpc_composer_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    phpc_composer_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="composer"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --php )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--php]="$2"
        shift
        shift
      else
        printf "%s\n" "--php requires an argument: --php PHP" >&2
        exit 1
      fi
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_catch_all
      other_args+=("$1")
      shift

      ;;

    esac
  done

  # :command.catch_all_filter
  if [[ ${#other_args[@]} -eq 0 ]]; then
    printf "missing required argument: ARGUMENTS...\nusage: phpc composer [OPTIONS] ARGUMENTS...\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args[--php]:-} ]] || args[--php]="AUTO"

  # :command.whitelist_filter
  if [[ ! ${args[--php]} =~ ^(AUTO|5.6|7.3|7.4|8.0|8.1)$ ]]; then
    printf "%s\n" "--php must be one of: AUTO, 5.6, 7.3, 7.4, 8.0, 8.1" >&2
    exit 1
  fi

}

# :command.parse_requirements
phpc_switch_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    phpc_switch_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="switch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[php]+x} ]]; then

        args[php]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key" >&2
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[php]+x} ]]; then
    printf "missing required argument: PHP\nusage: phpc switch PHP\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ! ${args[php]} =~ ^(5.6|7.3|7.4|8.0|8.1)$ ]]; then
    printf "%s\n" "php must be one of: 5.6, 7.3, 7.4, 8.0, 8.1" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  CONFIG_FILE="${HOME}/.config/phpc/config.ini"

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "run" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      phpc_run_usage
    else
      phpc_run_command
    fi

  elif [[ $action == "composer" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      phpc_composer_usage
    else
      phpc_composer_command
    fi

  elif [[ $action == "switch" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      phpc_switch_usage
    else
      phpc_switch_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
